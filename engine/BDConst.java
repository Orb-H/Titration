package engine;

import java.math.BigDecimal;
import java.util.Comparator;

public class BDConst {
	public static final BigDecimal ZERO = new BigDecimal(0);
	public static final BigDecimal ONE = new BigDecimal(1);
	public static final BigDecimal TWO = new BigDecimal(2);
	public static final BigDecimal THREE = new BigDecimal(3);
	public static final BigDecimal FOUR = new BigDecimal(4);
	public static final BigDecimal FIVE = new BigDecimal(5);
	public static final BigDecimal SIX = new BigDecimal(6);
	public static final BigDecimal SEVEN = new BigDecimal(7);
	public static final BigDecimal EIGHT = new BigDecimal(8);
	public static final BigDecimal NINE = new BigDecimal(9);
	public static final BigDecimal TEN = new BigDecimal(10);
	public static final BigDecimal ONEONE = new BigDecimal(11);
	public static final BigDecimal ONEFOUR = new BigDecimal(14);
	public static final BigDecimal ONESIX = new BigDecimal(16);
	public static final BigDecimal TWOSEVEN = new BigDecimal(27);
	public static final BigDecimal FOURO = new BigDecimal(40);
	public static final BigDecimal SIXFOUR = new BigDecimal(64);
	public static final BigDecimal TWOFIVESIX = new BigDecimal(256);
	public static final BigDecimal FIVEOO = new BigDecimal(500);
	public static final BigDecimal ONEOOONE = new BigDecimal(1001);

	public static final BigDecimal INT_MAX = new BigDecimal(Integer.MAX_VALUE);
	public static final BigDecimal LONG_MAX = new BigDecimal(Long.MAX_VALUE);
	public static final BigDecimal FLOAT_MAX = new BigDecimal(Float.MAX_VALUE);
	public static final BigDecimal DOUBLE_MAX = new BigDecimal(Double.MAX_VALUE);

	public static final BigDecimal SQRT_DIG = TEN.multiply(TEN).multiply(TWO);
	public static final BigDecimal SQRT_PRE = ONE.divide(TEN.pow(SQRT_DIG.intValue()));

	public static final BigDecimal SQRT_DIG5 = TEN.add(SEVEN);
	public static final BigDecimal SQRT_PRE5 = ONE.divide(TEN.pow(SQRT_DIG5.intValue()));

	public static final BigDecimal LOG_DIG = TEN.multiply(FIVE);
	public static final BigDecimal LOG_PRE = ONE.divide(TEN.pow(LOG_DIG.intValue()));

	public static final int precision = 500;

	public static final BigDecimal PI = new BigDecimal(
			"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275900994657640789512694683983525957098258226205224894077267194782684826014769909026401363944374553050682034962524517493996514314298091906592509372216964615157098583874105978859597729754989301617539284681382686838689427741559918559252459539594310499725246808459872736446958486538367362226260991246080512438843904512441365497627807977156914359977001296160894416948685558484063534220722258284886481584560285060168427394522674676788952521385225499546667278239864565961163548862305774564980355936345681743241125150760694794510965960940252288797108931456691368672287489405601015033086179286809208747609178249385890097149096759852613655497818931297848216829989487226588048575640142704775551323796414515237462343645428584447952658678210511413547357395231134271661021359695362314429524849371871101457654035902799344037420073105785390621983874478084784896833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080951465502252316038819301420937621378559566389377870830390697920773467221825625996615014215030680384477345492026054146659252014974428507325186660021324340881907104863317346496514539057962685610055081066587969981635747363840525714591028970641401109712062804390397595156771577004203378699360072305587631763594218731251471205329281918261861258673215791984148488291644706095752706957220917567116722910981690915280173506712748583222871835209353965725121083579151369882091444210067510334671103141267111369908658516398315019701651511685171437657618351556508849099898599823873455283316355076479185358932261854896321329330898570642046752");
	public static final BigDecimal TWOPI = PI.multiply(TWO);
	public static final BigDecimal HALFPI = PI.divide(TWO);
	public static final BigDecimal LN10 = new BigDecimal(
			"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058498078280597511938544450099781311469159346662410718466923101075984383191912922307925037472986509290098803919417026544168163357275557031515961135648465461908970428197633658369837163289821744073660091621778505417792763677311450417821376601110107310423978325218948988175979217986663943195239368559164471182467532456309125287783309636042629821530408745609277607266413547875766162629265682987049579549139549180492090694385807900327630179415031178668620924085379498612649334793548717374516758095370882810674524401058924449764796860751202757241818749893959716431055188481952883307466993178146349300003212003277656541304726218839705967944579434683432183953044148448037013057536742621536755798147704580314136377932362915601281853364984669422614652064599420729171193706024449293580370077189810973625332245483669885055282859661928050984471751985036666808749704969822732202448233430971691111368135884186965493237149969419796878030088504089796185987565798948364452120436982164152929878117429733325886079159125109671875109292484750239305726654462762009230687915181358034777012955936462984123664970233551745861955647724618577173693684046765770478743197805738532718109338834963388130699455693993461010907456160333122479493604553618491233330637047517248712763791409243983318101647378233796922656376820717069358463945316169494117018419381194054164494661112747128197058177832938417422314099300229115023621921867233372683856882735333719251034129307056325444266114297653883018223840910261985828884335874559604530045483707890525784731662837019533922310475275649981192287427897137157132283196410034221242100821806795252766898581809561192083917607210809199234615169525990994737827806481280587927319938934534153201859697110214075422827962982370689417647406422257572124553925261793736524344405605953365915391603125244801493132345724538795243890368392364505078817313597112381453237015084134911223243909276817247496079557991513639828810582857405380006533716555530141963322419180876210182049194926514838926922937078986352706385027022697551249943004381827884731992196581431219760711108763412244664073779455588583919440809311024283085084746319069321981468643083555347651114650769097333395832575068277582831051803299481308483996817211366798801920377706868547950620358417219984374394106362343231481174552475640089192165491269082781506048171199070188629209822862716730477199015770285357910506284673372232400018795615022890843967414685656483176881389206840957969180335433913646786574590549488029854381988073595542704154087340145317392545367328193997645602559843243305615873500293280257230645327034811810847231164468047519194264144375548657693929296");

	public static final Comparator<BigDecimal> c = new Comparator<BigDecimal>() {

		@Override
		public int compare(BigDecimal o1, BigDecimal o2) {
			return o1.compareTo(o2);
		}

	};
}
